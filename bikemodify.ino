//这是控制板间通信的主板代码


#include <Arduino.h>
#include <U8g2lib.h> 
#include <Wire.h> 
#include <ESP8266WiFi.h>
#include <SoftwareSerial.h>
#include<Servo.h>

Servo Servo1;                               //水平旋转的舵机
const char* ssid = "BIKE_AP";               //板间通信网络名称
const char* password = "123456789";         //板间通信网络密码
int mode=0;                                 //驱动运行模式
int warning=0;                              //是否察觉到潜在危险
int wake=0;                                 //语音模块是否唤醒
int shoot=0;                                //相机模式
int sleep=0;                                //待机动画运行到第几帧
int jump=0;                                 //唤醒动画运行到第几帧
int month=7;                                //月
int date=27;                                //日
int hour=6;                                 //时
int minute=10;                              //秒
int battery=50;                             //电量
int press=0;                                //拍照指令
int speed=0;                                //手动模式速度
int music=0;                                //音乐模式
int song=0;                                 //第几首歌
int pingmian=0;                             //水平旋转相机旋转角度
int lock=0;                                 //锁的状态
String weather="";                          //天气
String temperature="";                      //气温

WiFiServer server(80);                      //AP模式服务器
WiFiClient esp32cam_client;                 //视觉模块通信端口（网络）
WiFiClient esp8266_client;                  //驱动模块通信端口（网络）
SoftwareSerial mySerial(D3, D4);            //语音模块通信端口（串口）
SoftwareSerial mySerial2(D5, D6);           //云台兼手机数据处理板通信端口（串口）

bool esp32cam_connected = false;            //视觉模块是否连接
bool esp8266_connected = false;             //驱动网络是否连接

U8G2_SH1106_128X64_NONAME_2_HW_I2C u8g2(U8G2_R0,  U8X8_PIN_NONE);     //oled

//待机动画
const unsigned char epd_bitmap_creep_00004 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x07, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x9c, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x08, 0x3f, 0x06, 
	0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0xf8, 0x21, 0x0f, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x30, 
	0xe0, 0x19, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x18, 0x38, 0x31, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0x00, 0x08, 0x0c, 0x62, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x04, 0x64, 0x00, 0x00, 0x00, 
	0x18, 0x00, 0x00, 0x08, 0x04, 0xcc, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x07, 0x04, 0xc0, 0x00, 
	0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x04, 
	0x80, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1c, 0x00, 0x80, 0x01, 0xc0, 0x01, 0x00, 0x00, 0x80, 0x20, 0x00, 0x80, 0x00, 
	0xe6, 0x00, 0x00, 0x00, 0x80, 0x30, 0x00, 0xc0, 0x40, 0x3e, 0x00, 0x00, 0x00, 0x80, 0x1f, 0x00, 
	0x60, 0x60, 0x1e, 0x00, 0x80, 0x01, 0xc0, 0x00, 0x00, 0x30, 0x00, 0x07, 0x00, 0xc0, 0x07, 0xc0, 
	0x03, 0x00, 0x10, 0xc0, 0x03, 0x00, 0x00, 0x04, 0x60, 0x02, 0x00, 0x18, 0x80, 0x00, 0x00, 0x00, 
	0x0c, 0x20, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x18, 0x10, 0x04, 0x00, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0x10, 0x10, 0x08, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x08, 0x00, 0x30, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0xfe, 0x08, 0x00, 0xe0, 0x01, 0x80, 0x03, 0x00, 0xf8, 0x91, 0x07, 
	0x00, 0x00, 0xfe, 0xff, 0xfe, 0x67, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x03, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_creep_00006 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xf0, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x18, 0xe0, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x10, 0x38, 0x0c, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x10, 
	0x08, 0x18, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0x07, 0x20, 0x00, 0x00, 0x00, 0x30, 0x00, 
	0x00, 0xd0, 0x01, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x38, 0x00, 0xc0, 0x00, 0x00, 0x00, 
	0x1c, 0x00, 0x00, 0x0e, 0x00, 0x80, 0x01, 0x00, 0x00, 0x04, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
	0x80, 0x0c, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00, 0x80, 0x01, 0x00, 0x00, 
	0x00, 0x00, 0x80, 0x18, 0x00, 0x80, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 0x1e, 0x00, 0x80, 0x00, 
	0xe6, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x80, 0x40, 0x7e, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 
	0xc0, 0x40, 0x1e, 0x00, 0x80, 0x00, 0x40, 0x06, 0x00, 0x60, 0x00, 0x07, 0x00, 0x80, 0x03, 0xc0, 
	0x04, 0x00, 0x30, 0x80, 0x03, 0x00, 0x00, 0x0e, 0x80, 0x04, 0x00, 0x10, 0x80, 0x01, 0x00, 0x00, 
	0x08, 0x40, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x04, 0x00, 0x10, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x20, 0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x80, 0x00, 0x30, 0x03, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x80, 0x00, 0xf8, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x06, 0xc0, 0x81, 0x0f, 0x00, 
	0x00, 0x80, 0x3f, 0xf8, 0xfb, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_creep_00005 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x04, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xe0, 0x0f, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x10, 
	0xf0, 0x01, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0xe0, 0x1f, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 
	0x00, 0x30, 0x00, 0x18, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x06, 0x00, 0x30, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x02, 0x00, 0xe0, 0x03, 
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0e, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 
	0x80, 0x3c, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x20, 0x00, 0x80, 0x01, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x21, 0x00, 0x80, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x80, 0x38, 0x00, 0xc0, 0x00, 
	0xe6, 0x00, 0x00, 0x00, 0x80, 0x07, 0x00, 0x40, 0x40, 0x3e, 0x00, 0x00, 0x08, 0x40, 0x04, 0x00, 
	0x60, 0x60, 0x1e, 0x00, 0x00, 0x0c, 0x60, 0x08, 0x00, 0x30, 0x00, 0x07, 0x00, 0x00, 0x06, 0x20, 
	0x18, 0x00, 0x10, 0xc0, 0x03, 0x00, 0x00, 0x01, 0x20, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0xc0, 
	0x00, 0x30, 0x10, 0x00, 0x18, 0x00, 0x00, 0x00, 0x60, 0x00, 0x18, 0x10, 0x00, 0x08, 0x00, 0x00, 
	0x00, 0x20, 0x00, 0x18, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0xef, 0x18, 0x00, 0x20, 
	0x00, 0x00, 0x00, 0x20, 0xc0, 0x83, 0x0f, 0x00, 0x20, 0x00, 0xc0, 0x01, 0xc4, 0xf9, 0x00, 0x00, 
	0x00, 0xc0, 0x07, 0x60, 0x07, 0x3f, 0x06, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_creep_00007 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x70, 0x3e, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1f, 0x60, 0x80, 0xe3, 0x01, 
	0x00, 0x00, 0x00, 0x60, 0x00, 0x80, 0xe0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x30, 0x00, 0x80, 0x71, 
	0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x19, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x00, 0x0f, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x03, 0x00, 0x38, 0x00, 0x00, 0x00, 
	0x03, 0x00, 0x80, 0x01, 0x00, 0x38, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x70, 0x00, 
	0x00, 0x40, 0x00, 0x00, 0x60, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 
	0x90, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xf0, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x08, 0xe0, 
	0x1c, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x08, 0xe4, 0x0f, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 
	0x08, 0xc4, 0x03, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x0e, 0xe0, 0x00, 0x00, 0x70, 0x00, 0xd0, 
	0x00, 0x00, 0x02, 0x78, 0x00, 0x00, 0xc0, 0x02, 0xd0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 
	0x03, 0x90, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x98, 0x01, 0x00, 0x01, 0x00, 0x00, 
	0x00, 0x80, 0x01, 0xc8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0xec, 0x00, 0x00, 0x02, 
	0x00, 0x00, 0x00, 0xc0, 0x80, 0x3c, 0x00, 0x00, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x03, 0x00, 
	0x00, 0x1c, 0x00, 0xe0, 0x01, 0x00, 0x1f, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x1f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_creep_00000 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf8, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xf8, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x10, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x00, 0x10, 0xfe, 0x03, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0xf0, 0x03, 
	0x0e, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x00, 0x38, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 
	0x18, 0x00, 0x60, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x08, 
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x03, 0x00, 0x00, 0x7e, 0x00, 
	0x00, 0x06, 0x20, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x01, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x30, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x80, 0x01, 0x00, 0x01, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0xe7, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x21, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xe0, 
	0x03, 0x1e, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x30, 0x80, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 
	0x01, 0x10, 0xc0, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x0c, 
	0x00, 0xf0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 
	0x00, 0x10, 0x00, 0x0f, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0xff, 0x01, 0x00, 0x20, 0x01, 
	0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xc0, 0x1e, 0xe0, 0x07, 0x00, 0x0c, 0x00, 0x00, 0x00, 
	0x00, 0xf0, 0x3f, 0xfc, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_creep_00002 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x8c, 0x81, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x02, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xfa, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x0e, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x04, 0x80, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x80, 0x03, 0x00, 0xf8, 0x00, 0x00, 0x80, 0x01, 0x00, 0xe0, 0x00, 0x00, 0x8e, 0x01, 
	0x00, 0xc0, 0x00, 0x00, 0x40, 0x00, 0x00, 0x02, 0x01, 0x00, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x20, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0xc0, 
	0x18, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x20, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x78, 0x88, 0x07, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x0c, 0xc0, 0x00, 0x00, 0x70, 0x00, 0x40, 
	0x00, 0x00, 0x04, 0x70, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x00, 
	0x01, 0x60, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x02, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c, 0x00, 0x00, 0x04, 
	0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0x00, 0x00, 0xec, 0x00, 0x68, 0x00, 0x00, 0xfd, 0x01, 0x00, 
	0x00, 0x90, 0x03, 0x9c, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x87, 0xff, 0xdf, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_creep_00003 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x04, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x78, 0x26, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0x01, 0x18, 0x1f, 0x03, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xf8, 0x31, 0x05, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x30, 
	0xa0, 0x1d, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x10, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 
	0x00, 0x10, 0x40, 0x60, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 0x60, 0xc0, 0x00, 0x00, 0x00, 
	0x08, 0x00, 0x00, 0x0c, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x07, 0x00, 0x80, 0x00, 
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
	0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 
	0x00, 0x00, 0x80, 0x03, 0x00, 0x80, 0x01, 0xc4, 0x01, 0x00, 0x00, 0x80, 0x03, 0x00, 0x80, 0x00, 
	0x64, 0x00, 0x00, 0x00, 0xc0, 0x04, 0x00, 0xc0, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x40, 0x0c, 0x00, 
	0x60, 0x60, 0x1e, 0x00, 0x00, 0x00, 0xe0, 0x08, 0x00, 0x20, 0x00, 0x06, 0x00, 0x80, 0x03, 0xa0, 
	0x0f, 0x00, 0x30, 0xc0, 0x03, 0x00, 0x00, 0x06, 0xa0, 0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x0c, 0xa0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x90, 0x00, 0x00, 0x10, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x98, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x8c, 0x00, 0x00, 0x20, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0xdf, 0x00, 0x00, 0xe0, 0x01, 0xff, 0x60, 0x40, 0xfc, 0x61, 0x00, 
	0x00, 0x00, 0xff, 0x81, 0x9f, 0xbf, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_creep_00001 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x64, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x02, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xf2, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x1e, 
	0xf8, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x04, 0x80, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x00, 
	0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x03, 0x00, 0xfc, 0x00, 0x00, 0x80, 0x01, 0x00, 0xe0, 0x01, 0x00, 0x86, 0x01, 
	0x00, 0xc0, 0x00, 0x00, 0x40, 0x00, 0x00, 0x02, 0x01, 0x00, 0x40, 0x00, 0x0c, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0xc0, 
	0x18, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
	0x78, 0x88, 0x03, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x0c, 0xc0, 0x00, 0x00, 0x30, 0x00, 0x80, 
	0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 0x60, 0x00, 0xc0, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0xc0, 
	0x00, 0x60, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x03, 0x30, 0x00, 0x00, 0x02, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c, 0x00, 0x00, 0x04, 
	0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0x00, 0x00, 0x3c, 0x00, 0x30, 0x00, 0x00, 0xfd, 0x01, 0x00, 
	0x00, 0xe0, 0x03, 0xdc, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x87, 0xff, 0x1f, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char* creep_bitmap_allArray[8] = {
	epd_bitmap_creep_00000,
	epd_bitmap_creep_00001,
	epd_bitmap_creep_00002,
	epd_bitmap_creep_00003,
	epd_bitmap_creep_00004,
	epd_bitmap_creep_00005,
	epd_bitmap_creep_00006,
	epd_bitmap_creep_00007
};

//唤醒动画
const unsigned char epd_bitmap_jump_003 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1e, 0x00, 0x00, 0x78, 0x00, 0x00, 0x33, 0x00, 0x00, 0x84, 0xf1, 0x9f, 0x61, 0x00, 0x00, 0x04, 
	0x1b, 0xb0, 0x40, 0x00, 0x00, 0x04, 0x04, 0xc0, 0x40, 0x00, 0x00, 0x02, 0x00, 0x00, 0x40, 0x00, 
	0x00, 0x06, 0x00, 0x00, 0x60, 0x00, 0x00, 0x08, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00, 
	0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x00, 0x00, 0x20, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x60, 
	0x20, 0x13, 0x08, 0x00, 0x00, 0x40, 0x00, 0x01, 0x18, 0x00, 0x00, 0x20, 0x00, 0x01, 0x10, 0x00, 
	0x00, 0x20, 0x20, 0x09, 0x10, 0x00, 0x00, 0xfc, 0xe1, 0x0f, 0x0f, 0x00, 0x00, 0x04, 0xc3, 0x07, 
	0x19, 0x00, 0x00, 0x0c, 0x86, 0xc3, 0x20, 0x00, 0x00, 0x08, 0x84, 0x43, 0x20, 0x00, 0x00, 0x18, 
	0x04, 0x40, 0x60, 0x00, 0x00, 0x10, 0x04, 0xc0, 0x40, 0x00, 0x00, 0x10, 0x00, 0x80, 0x60, 0x00, 
	0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x30, 0x00, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 
	0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 0x00, 
	0x00, 0x38, 0x00, 0x00, 0x80, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x80, 0x01, 0x00, 0x04, 0x00, 0x00, 
	0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 
	0x00, 0x00, 0x80, 0x00, 0x00, 0x04, 0xe0, 0xff, 0x80, 0x00, 0x00, 0x18, 0x3e, 0x80, 0x83, 0x00, 
	0x00, 0xf0, 0x03, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_jump_004 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0x00, 
	0x00, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x04, 0x00, 0x00, 0x00, 0xf0, 0x03, 0x04, 0x00, 
	0x00, 0x00, 0x0f, 0x00, 0x04, 0x00, 0x00, 0x80, 0x00, 0x00, 0x06, 0x00, 0xc0, 0xe7, 0x00, 0x00, 
	0x02, 0x00, 0x40, 0x38, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 
	0x00, 0x04, 0x02, 0x00, 0x30, 0x00, 0x20, 0x04, 0x02, 0x00, 0x60, 0x00, 0x46, 0x00, 0x04, 0x00, 
	0xc0, 0x03, 0xc4, 0x00, 0x04, 0x00, 0x00, 0x02, 0xe0, 0x03, 0xf2, 0x03, 0x00, 0x02, 0xf8, 0x01, 
	0x1a, 0x06, 0x00, 0x0c, 0xf0, 0x00, 0x0c, 0x04, 0x00, 0x08, 0xe0, 0x00, 0x00, 0x04, 0x00, 0x84, 
	0x6f, 0x00, 0x00, 0x02, 0x00, 0xec, 0x08, 0x00, 0x80, 0x01, 0x00, 0x38, 0x08, 0x00, 0x60, 0x00, 
	0x00, 0x08, 0x08, 0x00, 0x10, 0x00, 0x00, 0x08, 0x04, 0x00, 0x10, 0x00, 0x00, 0x18, 0x06, 0x00, 
	0x30, 0x00, 0x00, 0x10, 0x02, 0x00, 0x20, 0x00, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x60, 0x00, 0x00, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 
	0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x40, 0x00, 0x00, 0x00, 0x06, 0x00, 0x40, 0x00, 0x00, 
	0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x04, 0x00, 0x60, 
	0x00, 0x00, 0x00, 0x04, 0x00, 0x3c, 0x00, 0xe0, 0x0f, 0x06, 0x00, 0x04, 0x00, 0x30, 0xf0, 0x03, 
	0x00, 0xdc, 0x00, 0x08, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 
	0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x00, 0x00, 0x00, 0x00, 
	0x1c, 0x02, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_jump_002 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 
	0x00, 0x80, 0x21, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x3f, 0xe0, 0x00, 0x00, 0x80, 0xc0, 0xe1, 
	0x90, 0x01, 0x00, 0x80, 0x00, 0x00, 0x13, 0x01, 0x00, 0x80, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x03, 
	0x00, 0x80, 0x20, 0x02, 0x80, 0x01, 0x00, 0x40, 0x00, 0x22, 0x60, 0x00, 0x00, 0x20, 0x00, 0x22, 
	0x10, 0x00, 0x00, 0x4f, 0x40, 0x02, 0x10, 0x00, 0x80, 0x78, 0xc0, 0x0f, 0x10, 0x00, 0x40, 0x60, 
	0x80, 0x07, 0x10, 0x00, 0x80, 0x40, 0x80, 0x07, 0x10, 0x00, 0x00, 0x01, 0x00, 0x03, 0x10, 0x00, 
	0x00, 0x02, 0x00, 0xf8, 0x08, 0x00, 0x00, 0x04, 0x00, 0x04, 0x0f, 0x00, 0x00, 0x0c, 0x00, 0x04, 
	0x08, 0x00, 0x00, 0x18, 0x00, 0x08, 0x08, 0x00, 0x00, 0x10, 0x00, 0x18, 0x08, 0x00, 0x00, 0x10, 
	0x00, 0x20, 0x08, 0x00, 0x00, 0x10, 0x00, 0xc0, 0x08, 0x00, 0x00, 0x18, 0x00, 0x00, 0x08, 0x00, 
	0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x02, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 0x80, 0x01, 
	0x00, 0x00, 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x80, 0x00, 0x00, 0x00, 0x78, 0x00, 
	0x80, 0xc0, 0x1f, 0x00, 0x64, 0x00, 0x00, 0x61, 0x10, 0x00, 0x32, 0x00, 0x00, 0x1f, 0x10, 0x00, 
	0x1f, 0x00, 0x00, 0x00, 0x10, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x60, 0x3c, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_jump_001 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x7c, 0x00, 0x00, 0x08, 0xf2, 0x3f, 0x46, 0x00, 0x00, 0x0c, 
	0x1e, 0xe0, 0x43, 0x00, 0x00, 0x04, 0x04, 0x80, 0xc0, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x80, 0x00, 
	0x00, 0x18, 0x00, 0x00, 0x40, 0x00, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x00, 0x40, 0x00, 0x00, 
	0x30, 0x00, 0x00, 0x40, 0x00, 0x00, 0x08, 0x00, 0x00, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x60, 
	0x20, 0x11, 0x08, 0x00, 0x00, 0x20, 0x00, 0x01, 0x08, 0x00, 0x00, 0x20, 0x00, 0x01, 0x10, 0x00, 
	0x00, 0x20, 0x20, 0x09, 0x3c, 0x00, 0x00, 0xe0, 0xc1, 0x0f, 0x62, 0x00, 0x00, 0x30, 0xc2, 0x07, 
	0x43, 0x00, 0x00, 0x08, 0x84, 0x83, 0x40, 0x00, 0x00, 0x04, 0x04, 0x80, 0x60, 0x00, 0x00, 0x04, 
	0x04, 0x40, 0x10, 0x00, 0x00, 0x04, 0x04, 0x00, 0x10, 0x00, 0x00, 0x18, 0x04, 0x00, 0x10, 0x00, 
	0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 
	0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x10, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x10, 0x00, 
	0x00, 0x06, 0x00, 0x00, 0x20, 0x00, 0x00, 0x03, 0x00, 0x00, 0x60, 0x00, 0x00, 0x01, 0x00, 0x00, 
	0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 
	0x00, 0x00, 0xc0, 0x00, 0x00, 0x02, 0xfc, 0x0f, 0x20, 0x00, 0x00, 0x86, 0x07, 0xf8, 0x33, 0x00, 
	0x00, 0x78, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char* jump_bitmap_allArray[4] = {
	epd_bitmap_jump_001,
	epd_bitmap_jump_002,
	epd_bitmap_jump_003,
	epd_bitmap_jump_004
};

//自动模式位图
const unsigned char epd_bitmap_auto [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x3f, 0x00, 0x80, 0x07, 0xc0, 0x00, 0x60, 0x3a, 0x1e, 0x01, 
	0x10, 0x2e, 0x1a, 0x02, 0x50, 0x20, 0x02, 0x05, 0x88, 0x63, 0xc3, 0x0a, 0x04, 0xf2, 0x47, 0x08, 
	0x04, 0xde, 0x35, 0x08, 0x02, 0x38, 0x9e, 0x11, 0x02, 0x30, 0x46, 0x12, 0x02, 0x30, 0x66, 0x10, 
	0x02, 0xde, 0x3d, 0x10, 0x62, 0x72, 0x07, 0x13, 0xd2, 0x63, 0xc3, 0x0d, 0x02, 0x20, 0x02, 0x10, 
	0x04, 0x23, 0xce, 0x21, 0x04, 0x32, 0x58, 0x21, 0x08, 0x10, 0x10, 0x40, 0x10, 0x1c, 0x10, 0x80, 
	0x10, 0x03, 0x10, 0x70, 0x10, 0x01, 0x18, 0x10, 0x90, 0x01, 0x0c, 0x10, 0x10, 0x00, 0x04, 0x08, 
	0x10, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x08, 0x10, 0x00, 0x08, 0x04, 
	0x10, 0x00, 0xf0, 0x03, 0x10, 0x00, 0x08, 0x00, 0x10, 0x00, 0x04, 0x00, 0xf0, 0xff, 0x07, 0x00
};

//手动模式位图
const unsigned char epd_bitmap_shoudong [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x1c, 0x00, 0xd8, 0xff, 0x63, 0x00, 0x04, 0x00, 0x80, 0x00, 0x84, 0xff, 0x81, 0x00, 
	0x04, 0x00, 0x80, 0x00, 0x04, 0x00, 0x80, 0x00, 0x84, 0xff, 0x81, 0x03, 0x04, 0x00, 0x80, 0x04, 
	0x04, 0x00, 0x80, 0xfc, 0x84, 0xff, 0x81, 0x80, 0x04, 0x00, 0x80, 0x80, 0x84, 0xff, 0x81, 0x80, 
	0x04, 0x00, 0x80, 0xfc, 0x04, 0x00, 0x80, 0x04, 0x84, 0xff, 0x81, 0x03, 0x04, 0x00, 0x80, 0x00, 
	0x04, 0x00, 0x80, 0x00, 0x84, 0xff, 0x81, 0x00, 0x04, 0x00, 0x80, 0x00, 0xd8, 0xff, 0x63, 0x00, 
	0xa0, 0x80, 0x1c, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 
	0xf0, 0xff, 0x7f, 0x00, 0x10, 0x00, 0x40, 0x00, 0xf0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00
};

//阻力模式位图
const unsigned char epd_bitmap_zuli [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1f, 0x00, 0x00, 0x38, 0x10, 0x00, 
	0x00, 0x0c, 0x20, 0x00, 0x00, 0x06, 0x3d, 0x00, 0x00, 0xe3, 0x3b, 0x00, 0x80, 0x21, 0x1c, 0x00, 
	0xc0, 0x20, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x00, 
	0x18, 0x09, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x0c, 0xfe, 0x00, 0x00, 
	0x04, 0x00, 0x3d, 0x00, 0x04, 0x00, 0xc3, 0x00, 0x0c, 0x00, 0x82, 0x0f, 0x38, 0x04, 0x00, 0x1e, 
	0x60, 0x38, 0x01, 0x24, 0x60, 0xa0, 0x00, 0x40, 0xc0, 0x01, 0x08, 0x40, 0x00, 0x07, 0x09, 0x40, 
	0x00, 0x9e, 0x1f, 0x40, 0x00, 0xf8, 0x73, 0x40, 0x00, 0x00, 0x62, 0x60, 0x00, 0x00, 0x46, 0x20, 
	0x00, 0x00, 0x84, 0x20, 0x00, 0x00, 0x8c, 0x39, 0x00, 0x00, 0x90, 0x0f, 0x00, 0x00, 0xe0, 0x00
};

//相机模式位图
const unsigned char epd_bitmap_photo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x00, 0x02, 0x02, 0xf8, 0x01, 0x01, 0x04, 
	0x98, 0xff, 0x01, 0x04, 0xfe, 0xff, 0x00, 0x78, 0x81, 0x21, 0x00, 0x80, 0x81, 0x71, 0xfc, 0x81, 
	0x81, 0x21, 0x03, 0x86, 0x81, 0x81, 0x21, 0x8c, 0x81, 0x81, 0xfc, 0x89, 0x81, 0x41, 0x06, 0x93, 
	0x81, 0x41, 0x02, 0x92, 0x81, 0x41, 0x02, 0xb2, 0x81, 0x61, 0x03, 0xb6, 0x81, 0x41, 0x02, 0xb2, 
	0x81, 0x41, 0x02, 0x92, 0x81, 0x41, 0x06, 0x93, 0x81, 0xc1, 0xfc, 0x99, 0x81, 0x81, 0x21, 0x8c, 
	0x81, 0x01, 0x03, 0x86, 0x81, 0x01, 0xfe, 0x83, 0x81, 0x01, 0x70, 0x80, 0x82, 0x01, 0x70, 0x80, 
	0xfc, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//音乐模式位图
const unsigned char epd_bitmap_speaker [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x07, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x80, 0xc4, 0xff, 0x0f, 0xc0, 0x36, 0x00, 0x14, 
	0x00, 0x18, 0x00, 0x13, 0x00, 0x04, 0x80, 0x10, 0x00, 0xfe, 0xff, 0x10, 0x80, 0x02, 0x80, 0x10, 
	0x06, 0xc2, 0x83, 0x10, 0x02, 0x22, 0x84, 0x10, 0x42, 0x92, 0x89, 0x10, 0x06, 0x4a, 0x92, 0x10, 
	0x06, 0x4a, 0x92, 0x10, 0x00, 0x4a, 0x92, 0x10, 0x40, 0x4a, 0x92, 0x10, 0x00, 0x92, 0x89, 0x10, 
	0x00, 0x22, 0x84, 0x10, 0x80, 0xc2, 0x83, 0x10, 0x00, 0x02, 0x80, 0x10, 0x00, 0x02, 0x80, 0x10, 
	0x00, 0x02, 0x80, 0x10, 0x00, 0xca, 0xa0, 0x10, 0x00, 0x32, 0xb0, 0x18, 0x00, 0x02, 0x80, 0x04, 
	0x00, 0x02, 0x80, 0x03, 0x00, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//警告位图
const unsigned char epd_bitmap_warning [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xe0, 0x0f, 0x00, 
	0x00, 0xe0, 0x0e, 0x00, 0x00, 0x70, 0x1c, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, 0x38, 0x38, 0x00, 
	0x00, 0x1c, 0x70, 0x00, 0x00, 0x9c, 0x73, 0x00, 0x00, 0xce, 0xe7, 0x00, 0x00, 0xce, 0xe7, 0x01, 
	0x00, 0xc7, 0xc7, 0x01, 0x80, 0xc3, 0x87, 0x03, 0x80, 0xc3, 0x87, 0x03, 0xc0, 0x81, 0x03, 0x07, 
	0xc0, 0x81, 0x03, 0x07, 0xe0, 0x80, 0x03, 0x0e, 0xe0, 0x80, 0x03, 0x1c, 0x70, 0x00, 0x00, 0x1c, 
	0x38, 0x00, 0x00, 0x38, 0x38, 0x80, 0x03, 0x38, 0x1c, 0x80, 0x03, 0x70, 0x1c, 0x80, 0x03, 0x70, 
	0x0e, 0x00, 0x00, 0xe0, 0x0e, 0x00, 0x00, 0xe0, 0xfe, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 
	0xfc, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//基本信息渲染
void info(){
	u8g2.setCursor(0,8);
	switch(month){
		case 1:
			u8g2.print("Jan "+String(date));break;
		case 2:
			u8g2.print("Feb "+String(date));break;
		case 3:
			u8g2.print("Mar "+String(date));break;
		case 4:
			u8g2.print("Apr "+String(date));break;
		case 5:
			u8g2.print("May "+String(date));break;
		case 6:
			u8g2.print("Jun "+String(date));break;
		case 7:
			u8g2.print("Jul "+String(date));break;
		case 8:
			u8g2.print("Aug "+String(date));break;
		case 9:
			u8g2.print("Sept "+String(date));break;
		case 10:
			u8g2.print("Oct "+String(date));break;
		case 11:
			u8g2.print("Nov "+String(date));break;
		case 12:
			u8g2.print("Dec "+String(date));break;
	}
	u8g2.setCursor(0,20);
	u8g2.print(String(hour)+":"+String(minute));
	u8g2.drawFrame(95, 2, 9, 18);
	u8g2.drawBox(97, 4+14.0*(100.0-battery)/100.0, 5, 14.0*(100.0-battery)/100.0);
	u8g2.setCursor(105,18);
	u8g2.print(String(battery)+"%");
	u8g2.drawPixel(98,1);
	u8g2.drawPixel(99,1);
	u8g2.drawPixel(100,1);
}

void setup() {
	
	Serial.begin(9600);      //调试串口    
	mySerial.begin(9600);    //语音串口
  mySerial2.begin(9600);   //云台串口

  //AP模式网络
  WiFi.mode(WIFI_AP);                    
  WiFi.softAP(ssid, password);
  Serial.print("AP名称: ");
  Serial.println(ssid);
  Serial.print("AP密码: ");
  Serial.println(password);
  Serial.print("IP地址: ");
  Serial.println(WiFi.softAPIP());
  server.begin();
  Serial.println("服务器已启动，等待客户端连接...");

  //初始化oled
  u8g2.begin();
	u8g2.setDrawColor(1); 
  u8g2.setBitmapMode(1); 
  u8g2.setFontMode(1);  
	u8g2.setFont(u8g2_font_ncenB08_tr);

  //初始化舵机
	Servo1.attach(D7);
}

void loop() {
	//各种模式下处理逻辑，主要是oled渲染
  if(mode){                                     
    switch(mode){
      case 1:{
				u8g2.clearBuffer();
				u8g2.firstPage();
				do{
					info();
					u8g2.drawXBMP( 43, 10, 32, 32, epd_bitmap_shoudong);
					u8g2.setCursor(25,60);
					u8g2.print("Manual Mode");
				}while(u8g2.nextPage());
			}break;
			case 2:{
	      u8g2.clearBuffer();
				u8g2.firstPage();
				do{
					info();
					u8g2.drawXBMP( 43, 10, 32, 32, epd_bitmap_auto);
					u8g2.setCursor(25,60);
					u8g2.print("Automatic Mode");
				}while(u8g2.nextPage());
			}break;
			case 3:{
	      u8g2.clearBuffer();
				u8g2.firstPage();
				do{
					info();
					u8g2.drawXBMP( 43, 10, 32, 32, epd_bitmap_zuli);
					u8g2.setCursor(25,60);
					u8g2.print("Damping Mode");
				}while(u8g2.nextPage());
			}break;
    }
  }else if(shoot){
		u8g2.clearBuffer();
		u8g2.firstPage();
		do{
			info();
			u8g2.drawXBMP( 43, 10, 32, 32, epd_bitmap_photo);
			u8g2.setCursor(25,60);
			u8g2.print("Camera Mode");
		}while(u8g2.nextPage());
  }else if(warning){
		u8g2.clearBuffer();
		u8g2.firstPage();
		do{
			info();
			u8g2.drawXBMP( 43, 10, 32, 32, epd_bitmap_warning);
			u8g2.setCursor(25,60);
			u8g2.print("Caution ! ! !");
		}while(u8g2.nextPage());
		delay(150);
  }else if(wake){
    u8g2.clearBuffer();
		u8g2.firstPage();
		do{
      info();
			u8g2.drawXBMP( 43, 4, 48, 48, jump_bitmap_allArray[jump]);
			u8g2.setCursor(45,60);
			u8g2.print("Ready !");
		}while(u8g2.nextPage());
		jump++;
		jump%=4;
		 delay(150);
  }else if(music){
		u8g2.clearBuffer();
		u8g2.firstPage();
		do{
			info();
			u8g2.drawXBMP( 43, 10, 32, 32, epd_bitmap_speaker);
			u8g2.setCursor(25,60);
			u8g2.print("Music Mode");
		}while(u8g2.nextPage());
    // switch(song){
		// 	case 0:{
    //     u8g2.clearBuffer();
		// 		u8g2.firstPage();
		// 		do{
		// 			info();
		// 			u8g2.drawXBMP( 43, 10, 32, 32, epd_bitmap_speaker);
		// 			u8g2.setCursor(25,60);
		// 			u8g2.print("Music Mode");
		// 		}while(u8g2.nextPage());
		// 	}break;
			// case 1:{
      //   u8g2.clearBuffer();
			// 	u8g2.firstPage();
			// 	do{
			// 		info();
			// 		u8g2.drawXBMP( 43, 10, 32, 32, epd_bitmap_speaker);
			// 		u8g2.setCursor(25,60);
			// 		u8g2.print("Music Mode");
			// 	}while(u8g2.nextPage());
			// }break;
			// case 2:{
      // u8g2.clearBuffer();
			// 	u8g2.firstPage();
			// 	do{
			// 		info();
			// 		u8g2.drawXBMP( 43, 10, 32, 32, epd_bitmap_zuli);
			// 		u8g2.setCursor(25,60);
			// 		u8g2.print("Damping Mode");
			// 	}while(u8g2.nextPage());
			// }break;
			// case 3:{
			// 	u8g2.clearBuffer();
			// 	u8g2.firstPage();
			// 	do{
			// 		info();
			// 		u8g2.drawXBMP( 43, 10, 32, 32, epd_bitmap_zuli);
			// 		u8g2.setCursor(25,60);
			// 		u8g2.print("Damping Mode");
			// 	}while(u8g2.nextPage());
			// }
		//}
	}else{
		u8g2.clearBuffer();
		u8g2.firstPage();
		do{
      info();
			u8g2.drawXBMP( 23, 10, 70, 38, creep_bitmap_allArray[sleep]);
			u8g2.setCursor(25,60);
			u8g2.print("Waiting");
			u8g2.setCursor(0,8);
			for(int i=0;i<sleep/2;i++){
        u8g2.drawPixel(80+5*i,60);
        u8g2.drawPixel(80+5*i,61);
        u8g2.drawPixel(81+5*i,60);
        u8g2.drawPixel(81+5*i,61);
			}
		}while(u8g2.nextPage());
    sleep++;
    sleep%=8;
    delay(120);
  }

  //处理语音模块数据，主要是通过语音切换不同模式
  if(mySerial.available()){
		String data=mySerial.readStringUntil('\n');
		data.trim();
		wake=0;
		mode=0;
		shoot=0;
		song=0;
		music=0;
		press=0;
		if(data=="wake"){
      wake=1;
		}else if(data=="manual"){
			mode=1;
		}else if(data=="auto"){
			mode=2;
		}else if(data=="zuli"){
			mode=3;
		}else if(data=="camera"){
			shoot=1;
		}else if(data=="jiasu"){
			speed+=10;
			speed=(speed>255)?255:speed;
		}else if(data=="jiansu"){
			speed-=10;
			speed=speed?speed:0;
		}else if(data=="music"){
			music=1;
		}else if(data=="press"){
			press=1;
		}
	}

	//控制水平旋转舵机
	int y=analogRead(A0);
	if(y<8&&pingmian>=0){
		pingmian-=10;
	}
	else if(y>1000&&pingmian<=180){
		pingmian+=10;
	}
  Servo1.write(pingmian);

	//处理云台板数据，主要是处理从手机和网络上获取的数据
  if(mySerial2.available()){
    String data=mySerial2.readStringUntil('\n');
		data.trim();
    Serial.println(data);
    if(data=="lock"){
      lock=1;
    }else if(data=="unlock"){
      lock=0;
    }else if(data.startsWith("month:")){
      month=data.substring(6).toInt();
    }else if(data.startsWith("date:")){
      date=data.substring(5).toInt();
    }else if(data.startsWith("hour:")){
      hour=data.substring(5).toInt();
    }else if(data.startsWith("minute:")){
      minute=data.substring(7).toInt();
    }else if(data.startsWith("weather:")){
      weather=data.substring(8);
    }else if(data.startsWith("temp:")){
      temperature=data.substring(5);
    }
    Serial.println(month);
  }

	//处理所有用AP模式连到主板的数据
  WiFiClient newClient = server.available();
  if (newClient) {
    Serial.println("有新客户端连接");
    unsigned long timeout = millis();
    while (newClient.available() == 0) {
      if (millis() - timeout > 5000) {
        Serial.println("客户端未发送身份标识，断开连接");
        newClient.stop();
        goto endCheck; 
      }
    }

    //通过id辨别视觉模块和驱动模块，所以写去东欧快连接AP网络时注意发送id
    String id = newClient.readStringUntil('\n');
    id.trim();  
    Serial.print("收到身份标识: ");
    Serial.println(id);
    
    if (id == "I_AM_ESP32CAM" && !esp32cam_connected) {                  
      esp32cam_client = newClient;
      esp32cam_connected = true;
      Serial.println("已识别ESP32-CAM，绑定到esp32cam_client");
      esp32cam_client.println("身份验证成功：你是ESP32-CAM");
    } 
    else if (id == "I_AM_ESP8266" && !esp8266_connected) {
      esp8266_client = newClient;
      esp8266_connected = true;
      Serial.println("已识别ESP8266，绑定到esp8266_client");
      esp8266_client.println("身份验证成功：你是ESP8266");
    } 
    else {
      newClient.println("身份验证失败：标识错误或对应设备已连接");
      Serial.println("身份验证失败，断开连接");
      newClient.stop();
    }
  }
  endCheck: 

  //处理视觉模块数据，主要是接受视觉模块发现的潜在风险，以及把拍照指令发给视觉模块
  if (esp32cam_connected && esp32cam_client.connected()) {
    if (esp32cam_client.available()) {
      String data = esp32cam_client.readStringUntil('\n');
      Serial.print("收到ESP32-CAM的数据: ");
      Serial.println(data);
			if(data=="jiansudai"){
				mySerial.println("jiansudai");
			}else if(data=="cheliang"){
				mySerial.println("cheliang");
			}else if(data=="xingren"){
				mySerial.println("xingren");
			}
			warning=1;
    }
		if(press){
			esp32cam_client.println("press");
			press=0;
		}
  } else {
    if (esp32cam_connected) {
      Serial.println("ESP32-CAM已断开连接");
      esp32cam_connected = false;
      esp32cam_client.stop();
    }
  }
	//处理驱动模块数据，待完善
  if (esp8266_connected && esp8266_client.connected()) {
		if(mode){
			esp8266_client.println("mode:"+String(mode));
			if(mode==1){
				esp8266_client.println("speed:"+String(speed));
			}
      esp8266_client.println("lock:"+String(lock));
		}
  } else {
    if (esp8266_connected) {
      Serial.println("另一个ESP8266已断开连接");
      esp8266_connected = false;
      esp8266_client.stop();
    }
  }
  delay(1);
}